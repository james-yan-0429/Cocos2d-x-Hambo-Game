//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.mm
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#include "LHSettings.h"
#include "cocos2d.h"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
LHSettings* LHSettings::sharedInstance()
{
	static LHSettings* sharedInstance = NULL;
	if (sharedInstance == NULL){
		sharedInstance = new LHSettings();
	}
    return sharedInstance;
}
////////////////////////////////////////////////////////////////////////////////
LHSettings::LHSettings()
{
	useRetinaOnIpad = true;
	convertLevel = true;
	lhPtmRatio = 32.0f;
	customAlpha = 1.0f;
	convertRatio = CCPointMake(1, 1);
	newBodyId = 0;
	imagesFolder = CCString::create("");

	resPathArray = new CCArray();
	resPathArray->initWithArray(CCArray::createWithContentsOfFile(CCFileUtils::sharedFileUtils()->fullPathFromRelativePath("respaths.plist")));
}

LHSettings::~LHSettings()
{
	imagesFolder->release();
	resPathArray->release();
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
int LHSettings::getNewBodyId(){
	return newBodyId++;
}

void LHSettings::setImageFolder(CCString* img){
	if(img != NULL)
		imagesFolder = img;
}
CCString* LHSettings::imageFolder(){
	return imagesFolder;
}



const char* LHSettings::getRealPath( const char* path )
{
	CCObject* obj;
	CCARRAY_FOREACH (resPathArray,obj)
	{
		CCString *str = (CCString*)obj;
		CCString *newPath = CCString::create("");
		newPath->m_sString += str->m_sString;
		newPath->m_sString += "/";
		newPath->m_sString += path;
		const char* ss = CCFileUtils::sharedFileUtils()->fullPathFromRelativePath(newPath->getCString());
			
		FILE *fp = fopen(ss,"r");
		if ( fp != NULL )
		{
			fclose(fp);
			return ss;
		}
	}
	return CCFileUtils::sharedFileUtils()->fullPathFromRelativePath(path);
}

CCString* LHSettings::imagePath(CCString* file, bool bCompletePath)
{
    if(isIpad())
    {   
		int nIndex = file->m_sString.find("-hd");
		if ( nIndex < 0 )
		{
			nIndex = file->m_sString.find('.');
			file->m_sString.replace(nIndex,1,"-hd.");
		}
		if ( !bCompletePath )
			return file;		

    }
	if ( !bCompletePath )
		return file;	

	CCString *fullpath = CCString::create(getRealPath(file->getCString()));

	return fullpath;

	//return CCString::createWithFormat("%s%s", imagesFolder->getCString(), file->getCString());
}
bool LHSettings::shouldScaleImageOnRetina(CCString* image)
{
    //if it contains -hd return true - else return false
    if(image == NULL)
        return false;
    
    if (image->m_sString.find("-hd") < 0 || image->m_sString.find("-hd") >= image->length()) {
        return false;
    } else {
        return true;
    }
        
    return false;
}

bool LHSettings::isIpad()
{
    if(!useRetinaOnIpad){
        return false;
    }
    
#ifndef __MAC_OS_X_VERSION_MAX_ALLOWED
	
    
#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
#if __IPHONE_3_2 <= __IPHONE_OS_VERSION_MAX_ALLOWED
	UIDevice* thisDevice = [UIDevice currentDevice];
	if ([thisDevice respondsToSelector:selector(userInterfaceIdiom)]){
		if(thisDevice.userInterfaceIdiom == UIUserInterfaceIdiomPad){
			return true;
		}
	}
	else{
		return false;
	}
#else
	return false;
#endif
    
#endif
    
#else
	return true;
#endif
	
	return true;
}

void LHSettings::setConvertRatio(CCPoint val){
	convertRatio = val;
}

CCPoint LHSettings::getConvertRatio(){
	
	if(!convertLevel)
		return CCPointMake(1, 1);
	
	return convertRatio;
}