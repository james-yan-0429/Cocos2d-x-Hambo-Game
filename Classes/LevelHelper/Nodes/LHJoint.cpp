//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.mm
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////
#include "LHJoint.h"
#include "LHSettings.h"
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
LHJoint::~LHJoint(){		
    
    //NSLog("LH Joint Dealloc");
    
    removeJointFromWorld();

    uniqueName->release();
    customUserValues->release();
}
////////////////////////////////////////////////////////////////////////////////
void LHJoint::initWithUniqueName(CCString * name){
    joint = 0;

	uniqueName = new CCString(name->getCString());
	customUserValues = new CCDictionary();
    tag = 0;
    type = LH_DISTANCE_JOINT;
}
////////////////////////////////////////////////////////////////////////////////
void LHJoint::jointWithUniqueName(CCString* name){
    initWithUniqueName(name);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void LHJoint::setUniqueName(CCString* name){
    CCAssert(name!=NULL, "UniqueName must not be NULL");

    uniqueName = name;
}
CCString* LHJoint::getUniqueName(){
    return uniqueName;   
}
////////////////////////////////////////////////////////////////////////////////
void LHJoint::setJoint(b2Joint* jt){
    CCAssert(jt!=NULL, "b2Joint must not be NULL");
    joint = jt;
}
b2Joint* LHJoint::getJoint(){
    return joint;
}
bool LHJoint::removeJointFromWorld(){
    
    if(0 != joint)
	{
        b2Body *body = joint->GetBodyA();
        
        if(0 == body)
        {
            body = joint->GetBodyB();
            
            if(0 == body)
                return false;
        }
        
        b2World* _world = body->GetWorld();
        
        if(0 == _world)
            return false;
        
        _world->DestroyJoint(joint);
        return true;
	}
    return false;
}
////////////////////////////////////////////////////////////////////////////////
void LHJoint::setCustomValue(CCObject* value,CCString* key){
    
    CCAssert(value!=NULL, "Custom value object must not be NULL");    
    CCAssert(key!=NULL, "Custom value key must not be NULL");    
    
    customUserValues->setObject(value,key->getCString());
}
CCObject* LHJoint::customValueWithKey(CCString* key){
    CCAssert(key!=NULL, "Custom value key must not be NULL");    
    return customUserValues->objectForKey(key->getCString());
}