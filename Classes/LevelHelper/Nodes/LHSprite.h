//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.h
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef LHSPRITE_H
#define LHSPRITE_H


#include "cocos2d.h"
#include "Box2D/Box2D.h"

USING_NS_CC;

class LHPathNode;
class LHAnimationNode;
class LevelHelperLoader;


class LHSprite : public CCSprite
{
private:
	b2Body* body; //week ptr
    CCString* uniqueName;
    CCDictionary* customUserValues;
    
    int currentFrame;
    LHAnimationNode* animation;
    LHPathNode* pathNode;
    
protected:
	LevelHelperLoader *m_level;

public:
	int afraidState;
	LHSprite();
	~LHSprite();

	void generalLHSpriteInit();

	void bomb(LevelHelperLoader* level);
	void proccessBomb(float dt);

	static LHSprite* spriteWithTexture(CCTexture2D* texture);
	static LHSprite* spriteWithTexture(CCTexture2D* texture,CCRect rect);
	static LHSprite* spriteWithSpriteFrame(CCSpriteFrame* spriteFrame);
	static LHSprite* spriteWithSpriteFrameName(CCString* spriteFrameName);
	static LHSprite* spriteWithFile(CCString* filename);
	static LHSprite* spriteWithFile(CCString* filename,CCRect rect);
// 	static LHSprite* spriteWithCGImage: (CGImageRef)image key:(CCString*)key;
 	static LHSprite* spriteWithBatchNode(CCSpriteBatchNode* batchNode, CCRect rect);
// 
// 	-(id) initWithTexture:(CCTexture2D*)texture;
// 	-(id) initWithTexture:(CCTexture2D*)texture rect:(CCRect)rect;
// 	-(id) initWithSpriteFrame:(CCSpriteFrame*)spriteFrame;
// 	-(id) initWithSpriteFrameName:(CCString*)spriteFrameName;
// 	-(id) initWithFile:(CCString*)filename;
// 	-(id) initWithFile:(CCString*)filename rect:(CCRect)rect;
// 	-(id) initWithCGImage:(CGImageRef)image key:(CCString*)key;
// 	-(id) initWithBatchNode:(CCSpriteBatchNode*)batchNode rect:(CCRect)rect;
// 	-(id) initWithBatchNode:(CCSpriteBatchNode*)batchNode rectInPixels:(CCRect)rect;

	////////////////////////////////////////////////////////////////////////////////
	void setUniqueName(CCString* name);
	CCString* getUniqueName();

	void setBody(b2Body* body);
	b2Body* getBody();
	bool removeBodyFromWorld();

	void setAnimation(LHAnimationNode* anim);
	LHAnimationNode* getAnimation();
	CCString* getAnimationName();
	int getNumberOfFrames();

	void setFrame(int frmNo);
	int getCurrentFrame();

	void setPathNode(LHPathNode* node);
	LHPathNode* getPathNode();

	void setCustomValue(CCObject* value,CCString* key);
	CCObject* getCustomValueWithKey(CCString*key);
	void explodeSpritesInRadius(float radius,float maxForce,CCPoint pos,b2World* world,bool doSuction);

};

#endif