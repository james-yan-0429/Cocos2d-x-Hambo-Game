//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.mm
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////
#include "LHAnimationNode.h"
#include "LevelHelper/LevelHelperLoader.h"
#include "LevelHelper/Nodes/LHSettings.h"
////////////////////////////////////////////////////////////////////////////////
LHAnimationNode::~LHAnimationNode(){		
    
    CCLog("LH Animation Dealloc");
    
    uniqueName->release();
    frames->release();
}
////////////////////////////////////////////////////////////////////////////////
LHAnimationNode::LHAnimationNode(CCString * name)
{
	uniqueName = CCString::createWithFormat("%s",name);
	frames = new CCArray;
    batchNode = NULL;
    speed = 0.2f;
    repetitions = 1;
    loop = false;
}
////////////////////////////////////////////////////////////////////////////////
void LHAnimationNode::setUniqueName(CCString* name){
    CCAssert(name!=NULL, "UniqueName must not be NULL");

    uniqueName = name;
}

CCString* LHAnimationNode::getUniqueName(){
    return uniqueName;   
}
////////////////////////////////////////////////////////////////////////////////
void LHAnimationNode::setFrames(CCArray* frms){
    frames->removeAllObjects();
    frames->addObjectsFromArray(frms);
}
////////////////////////////////////////////////////////////////////////////////
void LHAnimationNode::setBatchNode(CCSpriteBatchNode* node){
    batchNode = node;
}
////////////////////////////////////////////////////////////////////////////////
void LHAnimationNode::runAnimationOnSprite(LHSprite* ccsprite,CCNode *animNotifierId,SEL_CallFuncND animNotifierSel,bool notifOnLoop)
{
	CCAnimation *anim = CCAnimation::createWithSpriteFrames(frames,speed);
    
    CCFiniteTimeAction *seq;
    if(!loop)
    {
		CCRepeat* animAct = CCRepeat::create(CCAnimate::create(anim),repetitions);
        
        if( animNotifierId != NULL &&   animNotifierSel != NULL)
        {
			CCCallFuncND* actionRestart = CCCallFuncND::create(animNotifierId,animNotifierSel ,uniqueName);
			seq = CCSequence::createWithTwoActions(animAct,actionRestart);
        }
        else
        {
			seq = CCSequence::create(animAct, NULL);
        }
    }
    else
    {
        if(notifOnLoop && animNotifierId != NULL && animNotifierSel != NULL)
        {
            CCCallFuncND* actionRestart = CCCallFuncND::create(animNotifierId,animNotifierSel ,uniqueName);
            
			CCSequence* animAct = CCSequence::createWithTwoActions(CCAnimate::create(anim),actionRestart);
            
			seq = CCRepeatForever::create(animAct);
        }
        else
        {
			seq = CCRepeatForever::create(CCAnimate::create(anim));
        }
    }
    
    seq->setTag(LH_ANIM_ACTION_TAG);

    if(seq != NULL)
    {
        ccsprite->setAnimation(this);
        setAnimationTexturePropertiesOnSprite(ccsprite);
        ccsprite->runAction(seq);    
    }
}
////////////////////////////////////////////////////////////////////////////////
int LHAnimationNode::getNumberOfFrames() {
    return frames->count();
}
////////////////////////////////////////////////////////////////////////////////
void LHAnimationNode::setAnimationTexturePropertiesOnSprite(LHSprite* ccsprite)
{
    ccsprite->removeFromParentAndCleanup(true);
    
    ccsprite->setTexture(batchNode->getTexture());
    ccsprite->setBatchNode(batchNode);
    batchNode->addChild(ccsprite);
    
}
void LHAnimationNode::setFrame(int frameNo, LHSprite* spr){
    
    if(NULL == spr)
        return;
    
    if(frameNo >= 0 && frameNo < (int)frames->count())
    {
        CCSpriteFrame* frame = (CCSpriteFrame*)frames->objectAtIndex(frameNo);
    
        if(NULL != frame)
        {
            spr->setTextureRect(frame->getRect());
        }
    }
}
