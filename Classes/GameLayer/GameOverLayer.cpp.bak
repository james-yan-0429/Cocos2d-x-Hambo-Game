//
//  GameOverLayer.m
//  hotair
//
//  Created by admin on 12/7/11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#include "GameOverLayer.h"
#include "AppDelegate.h"
#include "Constants.h"
#include "ModalAlert/ModalAlert.h"
#include "ccframework/ResourceManager.h"
#include "ccframework/GrowButton.h"
#include "LevelSelect/StageSelectLayer.h"
#include "gamelayer/GameLayer.h"
#include "StoreLayer/StoreLayer.h"
#include "LevelSelect/LevelSelectLayer.h"

USING_NS_CC_EXT;

bool GameOverLayer::init()
{
	if( ScaleLayer::init() )
	{
        m_app->playBGM(B_GAME_OVER, false);
		g_bTutorial = false;

		setPosition( 0,SCREEN_HEIGHT );

		CCMoveTo *move1 = CCMoveTo::create(0.7f, ccp(0, 0/*- 120)*/));
		CCActionInterval* actEase1 = CCEaseElasticOut::create(move1,0.4f);
		runAction( actEase1 );
		return true;
    }
	return false;
}

GameOverLayer:: ~GameOverLayer() {
	unscheduleAllSelectors();
	removeAllChildrenWithCleanup(true);
}

void GameOverLayer::setInfo(GameLayer* parent,int score)
{
	parent->enableButtons(false);
	nGameScore = score;
	createBackground();
	createInfo();
	createButtons();

	//onTutorial(NULL,CCControlEvent());
}


void GameOverLayer::createBackground()
{
	CCLayerColor* backLayer = CCLayerColor::create( ccc4(0,0,0,0), 3000, 30000 );
// 	backLayer->setAnchorPoint(ccp(0,0));
// 	backLayer->setPosition(ccp(1500, 1500));
	addChild(backLayer);
	CCFadeTo *action = CCFadeTo::create(0.3f, 100);
	backLayer->runAction( action );

	CCSprite *sprDialog;
	sprDialog = m_resMgr->getSpriteWithName("game/gameresult/gamefailed_bg");
	sprDialog->setPosition(ccp(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2));
	addChild(sprDialog);
}

void GameOverLayer::createInfo()
{
#define		FONT_NAME		"font/PopupScreenTitleFont@2x.fnt"
#define		FONT_VALUE		"font/MainMenuFont@2x.fnt"
	CCLabelBMFont *levelLabel = CCLabelBMFont::create("Level:","font/PopupScreenTitleFont@2x.fnt");
	levelLabel->setPosition(ccp(358, SCREEN_HEIGHT - 240));    
	levelLabel->setColor(ccc3(247,166,0));
	levelLabel->setScale(0.75f);
	addChild(levelLabel);

	CCSprite* levelSp = m_resMgr->getSpriteWithName("game/gameresult/label");
	levelSp->setPosition(ccp(358, SCREEN_HEIGHT - 288));
	addChild(levelSp);

	levelCount = CCLabelBMFont::create("0","font/MainMenuFont@2x.fnt");
	levelCount->setPosition(ccp(358, SCREEN_HEIGHT - 288));
	levelCount->setColor(ccc3(255,255,255));
	levelCount->setString(CCString::createWithFormat("%d-%d", g_nCurMission+1, g_nCurLevel%PER_LEVEL_COUNT+1)->getCString());
	levelCount->setScale(0.75f);
	addChild(levelCount);

	CCLabelBMFont *scoreLabel = CCLabelBMFont::create("Score:","font/PopupScreenTitleFont@2x.fnt");
	scoreLabel->setPosition(ccp(683, SCREEN_HEIGHT - 240));    
	scoreLabel->setColor(ccc3(247,166,0));
	scoreLabel->setScale(0.75f);
	addChild(scoreLabel);

	CCSprite* scoreSp = m_resMgr->getSpriteWithName("game/gameresult/label");
	scoreSp->setPosition(ccp(683, SCREEN_HEIGHT - 288));
	addChild(scoreSp);

	scoreCount = CCLabelBMFont::create("0","font/MainMenuFont@2x.fnt");
	scoreCount->setPosition(ccp(683, SCREEN_HEIGHT - 288));
	scoreCount->setColor(ccc3(255,255,255));
	scoreCount->setString(CCString::createWithFormat("%d", nGameScore)->getCString());
	scoreCount->setScale(0.75f);
	addChild(scoreCount);

	CCLabelBMFont *coinLabel = CCLabelBMFont::create("Coins:","font/PopupScreenTitleFont@2x.fnt");
	coinLabel->setPosition(ccp(358, SCREEN_HEIGHT - 346));
	coinLabel->setColor(ccc3(247,166,0));
	coinLabel->setScale(0.75f);
	addChild(coinLabel);

	CCSprite* coinSp = m_resMgr->getSpriteWithName("game/gameresult/label");
	coinSp->setPosition(ccp(358, SCREEN_HEIGHT - 394));
	addChild(coinSp);

	coinCount = CCLabelBMFont::create("0","font/MainMenuFont@2x.fnt");
	coinCount->setPosition(ccp(358, SCREEN_HEIGHT - 394));
	coinCount->setColor(ccc3(255,255,255));
	coinCount->setString(CCString::createWithFormat("%d", g_nGameCoins)->getCString());
	coinCount->setScale(0.75f);
	addChild(coinCount);

	CCLabelBMFont *bestScoreLabel = CCLabelBMFont::create("Best Score:","font/PopupScreenTitleFont@2x.fnt");
	bestScoreLabel->setPosition(ccp(683, SCREEN_HEIGHT - 346));    
	bestScoreLabel->setColor(ccc3(247,166,0));
	bestScoreLabel->setScale(0.75f);
	addChild(bestScoreLabel);

	CCSprite* bestScoreSp = m_resMgr->getSpriteWithName("game/gameresult/label");
	bestScoreSp->setPosition(ccp(683, SCREEN_HEIGHT - 394));
	addChild(bestScoreSp);

	bestScoreCount = CCLabelBMFont::create("0","font/MainMenuFont@2x.fnt");
	bestScoreCount->setPosition(ccp(683, SCREEN_HEIGHT - 394));
	bestScoreCount->setColor(ccc3(255,255,255));
	bestScoreCount->setString(CCString::createWithFormat("%d", g_nBestScore[g_nCurLevel])->getCString());
	bestScoreCount->setScale(0.75f);
	addChild(bestScoreCount);
}

void GameOverLayer::createButtons()
{
	GrowButton *menuMainmenu = GrowButton::buttonWithSpriteFileName(
		"game/gameresult/btnMainmenu1",
		"game/gameresult/btnMainmenu2",
		this,
		cccontrol_selector(GameOverLayer::onMainMenu));
	menuMainmenu->setPosition(ccp(512, SCREEN_HEIGHT - 487));    
	addChild(menuMainmenu);  

	GrowButton *menuSolution = GrowButton::buttonWithSpriteFileName(
		"game/gameresult/btnSolution1",
		"game/gameresult/btnSolution2",
		this,
		cccontrol_selector(GameOverLayer::onTutorial));
	menuSolution->setPosition(ccp(536, SCREEN_HEIGHT - 487));    
	addChild(menuSolution); 

	GrowButton *menuShop = GrowButton::buttonWithSpriteFileName(
		"game/gameresult/btnShop1",
		"game/gameresult/btnShop2",
		this,
		cccontrol_selector(GameOverLayer::onShop));
	menuShop->setPosition(ccp(260, SCREEN_HEIGHT - 487));    
	addChild(menuShop);

	GrowButton *menuRestart = GrowButton::buttonWithSpriteFileName(
		"game/gameresult/btnRestart1",
		"game/gameresult/btnRestart2",
		this,
		cccontrol_selector(GameOverLayer::onRestart));
	menuRestart->setPosition(ccp(293, SCREEN_HEIGHT - 432));    
	addChild(menuRestart);

	GrowButton *menuSkip = GrowButton::buttonWithSpriteFileName(
		"game/gameresult/btnSkip1",
		"game/gameresult/btnSkip2",
		this,
		cccontrol_selector(GameOverLayer::onSkip));
	menuSkip->setPosition(ccp(500, SCREEN_HEIGHT - 432));    
	addChild(menuSkip);

	if ( g_nSkipsNumber <= 0 )
	{
		menuSkip->setEnabled(false);
		menuSkip->setOpacity(200);
	}
	else
	{
		CCString *skipCount = CCString::createWithFormat("%d",g_nSkipsNumber);
		CCLabelBMFont *skipCountLabel = CCLabelBMFont::create(skipCount->getCString(),"font/MainMenuFont@2x.fnt");
		skipCountLabel->setPosition( ccp(menuSkip->boundingBox().size.width*0.9f,menuSkip->boundingBox().size.height*0.5f) );    
		skipCountLabel->setColor(ccc3(247,166,0));
		menuSkip->addChild(skipCountLabel);
	}

	setTouchEnabled(true);

	//GrowButton *menuTurotial = GrowButton::buttonWithSpriteFileName("game/gameresult/btnSolution2","game/gameresult/btnSolution1",this,menu_selector(GameOverLayer::onTutorial));
	//menuTurotial->setPosition(ccp(SCREEN_WIDTH / 2 - 171, SCREEN_HEIGHT / 2 - 192));    
	//addChild(menuTurotial);
}

void GameOverLayer::onShop(CCObject *sender, CCControlEvent event)
{
	m_app->playEff(E_CLICK);

	g_bStoreFromGame = true;
	CCScene* sc = CCTransitionFade::create(0.7f,StoreLayer::scene());
	CCDirector::sharedDirector()->replaceScene(sc);
}

void GameOverLayer:: onMainMenu( CCObject *sender, CCControlEvent event )
{
	m_app->playEff(E_CLICK);

	g_nLife = INIT_PLAYER_LIFE;
	g_nCurLevel = 0;
	//g_nGameScore = 0;
	g_bGameOver = false;
	m_app->saveSetting();

	CCScene *scene = StageSelectLayer::scene();
	CCDirector::sharedDirector()->replaceScene(CCTransitionFade::create(0.7f, scene));
}

void GameOverLayer:: onRestart( CCObject *sender, CCControlEvent event )
{
	m_app->playEff(E_CLICK);

	g_bTutorial = false;
	g_bGameOver = false;
	m_app->changeWindow(WND_GAME);
}

void GameOverLayer:: onTutorial( CCObject *sender, CCControlEvent event )
{  
	m_app->playEff(E_CLICK);
	if(g_nSolutionsNumber == 0){
		onSelectLess();
		return;
	}
	g_nSolutionsNumber --;
	g_bGamePause = false;
	g_bTutorial = true;

	m_app->changeWindow(WND_GAME);
}

void GameOverLayer:: onSkip( CCObject *sender, CCControlEvent event )
{
	m_app->playEff(E_CLICK);
    if(LEVEL_COUNT == g_nCurLevel + 1)
        return;

    if(g_nSkipsNumber == 0){
        onSelectLess();
        return;
    
	}

	g_bTutorial = false;
    g_nSkipsNumber --;
    g_nCurLevel ++;    
	g_nAvailableLevel[g_nCurMission]++;

	if ( g_nCurLevel % PER_LEVEL_COUNT == 0 )
	{
		g_nMissionsUnlocked[g_nCurMission+1] = true;
		if ( g_nAvailableLevel[g_nCurMission+1] < 0 )
			g_nAvailableLevel[g_nCurMission+1] = 0;

		CCScene *scene = LevelSelectLayer::scene();
		CCDirector::sharedDirector()->replaceScene(CCTransitionFade::create(0.7f,scene));
	}
	else
	{
		m_app->saveSetting();
		m_app->changeWindow(WND_GAME);
	}
}

void GameOverLayer:: onSelectLess() {
    m_app->playEff(E_CLICK);
	ModalAlert::Tell("No Enough Coins",this,NULL);
}
